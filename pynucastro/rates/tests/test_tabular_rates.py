# unit tests for rates

from pytest import approx

import pynucastro as pyna


class TestTabularRates:
    @classmethod
    def setup_class(cls):
        """ this is run once for each class before any tests """

    @classmethod
    def teardown_class(cls):
        """ this is run once for each class after all tests """

    def setup_method(self):
        """ this is run before each test """

        lib = pyna.TabularLibrary()
        self.rc = pyna.RateCollection(libraries=[lib])

    def teardown_method(self):
        """ this is run after each test """

    def test_rate_values(self):

        rho = 1.2e8
        T = 1.5e9

        comp = pyna.Composition(self.rc.get_nuclei())
        comp.set_all(1)
        comp.normalize()

        # this is generated by doing
        # rvals = ec.evalue_rates(rho, T, comp)
        # for r in rvals:
        #     print(f"'{r.fname}': {rvals[r]},")

        stored_rates = {
            'al23__mg23': 0.003325571780147662,
            'al24__mg24': 0.0018609850628930817,
            'al25__mg25': 0.0008673916981132076,
            'al26__mg26': 1.6697474600870827e-05,
            'al27__mg27': 1.9145220125786163e-11,
            'al28__mg28': 1.7464898921832882e-13,
            'al28__si28': 4.758456199460916e-07,
            'f17__o17': 0.0009393387347391787,
            'f18__o18': 0.0002921538784067086,
            'f19__o19': 5.367481628599801e-17,
            'f20__ne20': 4.267407547169812e-05,
            'f20__o20': 3.472915094339623e-14,
            'f21__ne21': 0.00010459838274932613,
            'f21__o21': 4.769850853548966e-28,
            'f22__ne22': 0.00011282658662092624,
            'f23__ne23': 0.00022270820344544705,
            'mg20__na20': 0.009212004716981132,
            'mg21__na21': 0.0049789164420485175,
            'mg22__na22': 0.0024188636363636365,
            'mg23__na23': 0.0007809339622641509,
            'mg24__na24': 1.0339819182389936e-20,
            'mg25__na25': 2.1270815094339622e-14,
            'mg26__na26': 2.284287373004354e-30,
            'mg27__al27': 5.7631558350803634e-09,
            'mg27__na27': 2.0061362683438153e-29,
            'mg28__al28': 3.286745956873315e-11,
            'mg28__na28': 5.5662931266846354e-45,
            'na19__ne19': 0.004455850049652432,
            'na20__ne20': 0.004357868867924529,
            'na21__ne21': 0.0007029830188679245,
            'na22__ne22': 1.9629150943396227e-06,
            'na23__ne23': 3.599119770303527e-16,
            'na24__mg24': 5.091114779874214e-07,
            'na24__ne24': 4.868698899371068e-11,
            'na25__mg25': 3.6938913207547163e-06,
            'na25__ne25': 3.969941886792453e-25,
            'na26__mg26': 0.001012000725689405,
            'na27__mg27': 0.0017497672955974842,
            'na28__mg28': 0.008824009433962263,
            'ne18__f18': 0.004117197064989518,
            'ne19__f19': 0.0013002313803376366,
            'ne20__f20': 9.132593396226415e-24,
            'ne21__f21': 1.4605112309074573e-19,
            'ne22__f22': 4.7896243567753e-37,
            'ne23__f23': 2.9241271534044295e-29,
            'ne23__na23': 8.229934372436421e-06,
            'ne24__na24': 4.895678459119496e-08,
            'ne25__na25': 0.0007466306415094339,
            'o17__f17': 1.5250188679245281e-22,
            'o18__f18': 3.5192620545073376e-23,
            'o20__f20': 8.06109716981132e-06,
            'o21__f21': 0.00010417529200359388,
            'p27__si27': 0.003163809923130678,
            'p28__si28': 0.002068931266846361,
            's28__p28': 0.004492893530997304,
            'si24__al24': 0.005087950471698113,
            'si25__al25': 0.003356480754716981,
            'si26__al26': 0.002266735123367199,
            'si27__al27': 0.000895324248777079,
            'si28__al28': 1.0828443396226414e-16,
        }

        ye = comp.eval_ye()
        ys = comp.get_molar()

        # the individual rate is
        # r = Y(reactant) * table_value

        for r in self.rc.get_rates():
            rr = ys[r.reactants[0]] * r.eval(T, rhoY=rho*ye)
            if r.fname in stored_rates:
                assert rr == approx(stored_rates[r.fname], rel=1.e-6, abs=1.e-100), f"rate: {r} does not agree"
            else:
                print(f"WARNING: missing tests for tabular rate {r}")
