# unit tests for rates

from pytest import approx, raises

import pynucastro as pyna


class TestTabularRates:
    @classmethod
    def setup_class(cls):
        """ this is run once for each class before any tests """

    @classmethod
    def teardown_class(cls):
        """ this is run once for each class after all tests """

    def setup_method(self):
        """ this is run before each test """

        lib_su = pyna.SuzukiLibrary()
        lib_la = pyna.LangankeLibrary()
        self.rc_su = pyna.RateCollection(libraries=[lib_su])
        self.rc_la = pyna.RateCollection(libraries=[lib_la])

    def teardown_method(self):
        """ this is run after each test """

    def test_rate_values_suzuki(self):

        rho = 1.2e8
        T = 1.5e9

        comp_su = pyna.Composition(self.rc_su.get_nuclei())
        comp_su.set_all(1)
        comp_su.normalize()

        # this is generated by doing
        # rvals = ec.evalue_rates(rho, T, comp)
        # for r in rvals:
        #     print(f"'{r.fname}': {rvals[r]},")

        stored_rates_su = {
            'al23__mg23': 0.0018356969491904495,
            'al24__mg24': 0.0010224143375329186,
            'al25__mg25': 0.0004742839102314945,
            'al26__mg26': 8.208195176601902e-06,
            'al27__mg27': 1.3548922253387587e-12,
            'al28__mg28': 2.82771853373719e-14,
            'al28__si28': 6.552181957939603e-07,
            'f17__o17': 0.0004964162849900655,
            'f18__o18': 0.00014752795061742893,
            'f19__o19': 1.4589243454067581e-18,
            'f20__ne20': 4.575609904051387e-05,
            'f20__o20': 1.413854271576516e-15,
            'f21__ne21': 0.0001131073690508162,
            'f21__o21': 3.123684503103512e-30,
            'f22__ne22': 0.0001215897114169894,
            'f23__ne23': 0.00023974141956359604,
            'mg20__na20': 0.005114821722250049,
            'mg21__na21': 0.0027551736679093503,
            'mg22__na22': 0.0013109707173084527,
            'mg23__na23': 0.0004219912985023772,
            'mg24__na24': 1.6598635700843666e-22,
            'mg25__na25': 8.591632561336034e-16,
            'mg26__na26': 8.68429638614793e-33,
            'mg27__al27': 1.361348911272524e-08,
            'mg27__na27': 8.723314871252093e-32,
            'mg28__al28': 3.336720258691769e-11,
            'mg28__na28': 2.8134798652347447e-48,
            'na19__ne19': 0.002449472490421163,
            'na20__ne20': 0.002428040325297442,
            'na21__ne21': 0.00037796168976840364,
            'na22__ne22': 8.135557391945126e-07,
            'na23__ne23': 1.1720011968249513e-17,
            'na24__mg24': 4.406876111298294e-07,
            'na24__ne24': 3.756853129605931e-12,
            'na25__mg25': 4.479044974800567e-06,
            'na25__ne25': 3.72540094885677e-27,
            'na26__mg26': 0.001022078977999804,
            'na27__mg27': 0.0017911484289089184,
            'na28__mg28': 0.009005626791070679,
            'ne18__f18': 0.0022422277113142404,
            'ne19__f19': 0.0006992986372563014,
            'ne20__f20': 9.47646722208835e-26,
            'ne21__f21': 2.715931312189591e-21,
            'ne22__f22': 9.580760966938022e-40,
            'ne23__f23': 1.6479178669188904e-31,
            'ne23__na23': 9.3540132273414e-06,
            'ne24__na24': 1.0429568596930843e-07,
            'ne25__na25': 0.0007774750136737904,
            'o17__f17': 2.992303848236561e-23,
            'o18__f18': 6.178789007042831e-23,
            'o19__f19': 1.4762829483676722e-05,
            'o20__f20': 1.1564141869489023e-05,
            'o21__f21': 0.0001140275780950444,
            'p27__si27': 0.0017552224872207786,
            'p28__si28': 0.0011558955780814398,
            's28__p28': 0.0025226735211831297,
            'si24__al24': 0.002836345548021039,
            'si25__al25': 0.0018713317001937818,
            'si26__al26': 0.0012411477482899727,
            'si27__al27': 0.0004907519533774708,
            'si28__al28': 3.1330669347239767e-18
        }

        ye_su = comp_su.eval_ye()
        ys_su = comp_su.get_molar()

        # the individual rate is
        # r = Y(reactant) * table_value

        for r in self.rc_su.get_rates():
            rr = ys_su[r.reactants[0]] * r.eval(T, rhoY=rho*ye_su)
            if r.fname in stored_rates_su:
                assert rr == approx(stored_rates_su[r.fname], rel=1.e-6, abs=1.e-100), f"rate: {r} does not agree"
            else:
                print(f"WARNING: missing Suzuki tests for tabular rate {r}")

    def test_rate_values_langanke(self):

        rho = 1.2e8
        T = 1.5e9

        comp_la = pyna.Composition(self.rc_la.get_nuclei())
        comp_la.set_all(1)
        comp_la.normalize()

        # this is generated by doing
        # rvals = ec.evalue_rates(rho, T, comp)
        # for r in rvals:
        #     print(f"'{r.fname}': {rvals[r]},")

        stored_rates_la = {
            'p__n': 7.558870243248579e-05,
            'mn49__cr49': 0.0007366727091328324,
            'mn55__fe55': 3.1786876316835767e-16,
            'co64__ni64': 0.00013627811552984132,
            'cr49__mn49': 7.433738901148172e-39,
            'fe61__mn61': 2.5197439739383014e-26,
            'fe57__co57': 3.611408875082576e-18,
            'fe54__co54': 2.898133536915984e-40,
            'mn52__fe52': 4.9550651949748136e-23,
            'cr57__mn57': 3.03357436763274e-06,
            'zn64__cu64': 8.303524662605314e-08,
            'cu63__zn63': 1.3376725011997922e-25,
            'co63__fe63': 1.048906247594336e-24,
            'ca51__sc51': 8.85909262069812e-06,
            'mn56__fe56': 1.6654682313995537e-07,
            'zn63__cu63': 2.7450034291161515e-06,
            'sc47__ca47': 2.2040872232122854e-13,
            'mn54__fe54': 5.915912286093991e-14,
            'v54__ti54': 4.8619355857031675e-18,
            'co58__fe58': 3.3573965600085414e-08,
            'ni63__cu63': 2.1613603971935713e-15,
            'ca48__sc48': 1.6946455891576352e-19,
            'v56__ti56': 7.026842584712173e-27,
            'fe60__co60': 3.9680395271644945e-15,
            'ga64__zn64': 1.9023595580300654e-05,
            'fe57__mn57': 1.2218402907704675e-12,
            'mn50__cr50': 0.0003320708504027954,
            'fe56__mn56': 1.46122831525815e-15,
            'ge65__ga65': 4.5634622740133776e-05,
            'ni59__co59': 9.204452012861679e-08,
            'ca47__sc47': 1.5747941882298966e-12,
            'ti51__v51': 1.5507969328138803e-08,
            'cu65__zn65': 2.0405971409944253e-19,
            'zn64__ga64': 3.5548473689954254e-37,
            'co64__fe64': 4.044474852574769e-19,
            'ca46__sc46': 1.5522740355394187e-20,
            'sc48__ca48': 1.118446910435972e-13,
            'v51__cr51': 1.3496462612884804e-17,
            'sc52__ti52': 8.78873905865045e-06,
            'ni58__cu58': 1.9261419599572421e-41,
            'co57__ni57': 7.432314436280484e-25,
            'ti55__v55': 4.910700748333321e-05,
            'ge64__ga64': 2.8541864580127472e-05,
            'zn61__cu61': 1.6022144582326007e-05,
            'co62__fe62': 4.506358431873026e-13,
            'cr58__mn58': 5.01523744527494e-06,
            'ti50__v50': 6.578550245877096e-22,
            'co61__fe61': 1.8548010283318373e-17,
            'ni65__cu65': 5.151947984134186e-09,
            'ti56__v56': 0.0003639081657878419,
            'v55__cr55': 1.0180364624002767e-05,
            'ti47__v47': 3.916164753248513e-24,
            'cu58__ni58': 0.00017784848747368512,
            'sc46__ti46': 1.641566581899633e-11,
            'co65__ni65': 4.957151531534562e-05,
            'ca50__sc50': 2.4502356056441734e-06,
            'zn62__ga62': 1.4835721381223987e-43,
            'co54__fe54': 0.0002705235253373661,
            'fe63__co63': 8.502332999827177e-06,
            'cr50__mn50': 2.1428080220384474e-38,
            'ni61__co61': 2.0629665785991204e-09,
            'v49__cr49': 3.106152897610862e-23,
            'co63__ni63': 1.376607699983757e-06,
            'v47__ti47': 5.8837546770481e-06,
            'fe52__mn52': 4.787219355322723e-06,
            'mn59__fe59': 9.193634624183979e-06,
            'mn60__fe60': 0.0002523175757511599,
            'v47__cr47': 5.457509736374555e-38,
            'mn57__cr57': 1.4902073258602157e-20,
            'mn61__fe61': 0.0002405893758526718,
            'ti46__v46': 1.4496653582828003e-36,
            'sc49__ti49': 1.0253057189009096e-09,
            'v51__ti51': 1.6564156694656686e-12,
            'co60__ni60': 1.3868527094318867e-09,
            'ti53__v53': 8.254182130785463e-07,
            'co55__fe55': 9.5652557631686e-07,
            'mn58__fe58': 7.212896806066104e-06,
            'co56__ni56': 1.011055955423377e-21,
            'mn56__cr56': 2.006277538772467e-10,
            'v53__cr53': 3.876055239475765e-07,
            'ni65__co65': 9.94953222887641e-23,
            'fe59__co59': 3.125054149873378e-11,
            'ni61__cu61': 1.3980690264558952e-22,
            'cr51__v51': 2.8117767495413197e-07,
            'mn55__cr55': 4.690827616959843e-13,
            'mn58__cr58': 1.386874163298365e-17,
            'v45__cr45': 2.484681743228909e-54,
            'cu61__zn61': 2.8392166452009976e-32,
            'ca45__sc45': 4.855704922199137e-16,
            'ti49__sc49': 1.5249852627304697e-11,
            'co61__ni61': 1.8011446043723412e-11,
            'v46__ti46': 0.0007232474633662782,
            'ni62__cu62': 2.5197407113074367e-27,
            'ti51__sc51': 1.1499236782532747e-24,
            'fe53__mn53': 8.389340266943337e-06,
            'zn60__cu60': 1.575204010868408e-05,
            'mn57__fe57': 1.3529256470820917e-07,
            'sc45__ca45': 1.4249560465402422e-08,
            'mn60__cr60': 1.1543026476741542e-23,
            'cr54__mn54': 1.013667316700379e-18,
            'sc49__ca49': 5.019112055724216e-22,
            'v53__ti53': 1.434760225852427e-20,
            'ga63__zn63': 3.878609018769381e-05,
            'cr55__v55': 1.2831282118471635e-22,
            'v45__ti45': 0.0005849436783209476,
            'v49__ti49': 5.103636011700232e-08,
            'sc50__ca50': 9.815024110622622e-21,
            'fe64__co64': 3.427116675529298e-05,
            'fe55__mn55': 3.2502661955127306e-08,
            'co55__ni55': 4.613845979541839e-42,
            'zn65__cu65': 1.875612071034173e-07,
            'sc51__ti51': 4.887208059988256e-06,
            'n__p': 8.687195028683885e-10,
            'cr60__mn60': 0.00017137413392307195,
            'co60__fe60': 1.5237728690386513e-10,
            'ga65__ge65': 1.114548307480868e-34,
            'cu64__zn64': 6.947648680351284e-14,
            'fe60__mn60': 4.947356914548806e-30,
            'cr52__v52': 3.670221541615632e-16,
            'cr48__v48': 7.571352114071061e-06,
            'ti48__v48': 3.677401427897203e-27,
            'cr56__v56': 6.121316564807127e-32,
            'fe56__co56': 1.2332566030348113e-28,
            'v52__ti52': 2.9024820713256162e-11,
            'co59__fe59': 8.343639289664051e-12,
            'ti46__sc46': 5.867366817718865e-13,
            'mn53__cr53': 2.593741082296412e-08,
            'zn65__ga65': 1.061812599757104e-25,
            'v50__ti50': 1.2347598384252832e-08,
            'cr54__v54': 6.665222632236972e-26,
            'v50__cr50': 1.9511245942000273e-12,
            'sc50__ti50': 7.650556725134291e-07,
            'ni55__co55': 0.001092971896532629,
            'cr55__mn55': 7.256665061517085e-08,
            'fe59__mn59': 2.479534123059382e-20,
            'mn53__fe53': 1.6197172776864845e-26,
            'sc45__ti45': 1.971444692845618e-21,
            'cr47__v47': 0.0006899831256383501,
            'cr46__v46': 0.001499489363639145,
            'ti54__v54': 1.5829704749976513e-06,
            'fe58__co58': 1.053053591138989e-21,
            'cr52__mn52': 3.103513880893331e-29,
            'cr51__mn51': 5.066529843884422e-25,
            'ti50__sc50': 7.2002659684862e-26,
            'mn54__cr54': 2.6804293397015252e-08,
            'cr58__v58': 8.675910303654274e-40,
            'ni57__co57': 1.4297847059934802e-06,
            'v48__ti48': 1.7181574998064635e-06,
            'co57__fe57': 2.9043236806438992e-08,
            'cu61__ni61': 3.8144240685512e-06,
            'co58__ni58': 5.576648379700194e-15,
            'ni60__cu60': 1.330246078621377e-33,
            'ga62__zn62': 0.0011622096439144766,
            'cr53__v53': 1.3387987573919933e-14,
            'zn62__cu62': 4.910009858372687e-06,
            'ti47__sc47': 1.6548140491798895e-08,
            'ni62__co62': 1.8156900147676334e-20,
            'fe58__mn58': 3.46194799861307e-23,
            'ni60__co60': 3.0447610267041136e-14,
            'co62__ni62': 6.466492473123774e-07,
            'cu59__ni59': 1.683477878625942e-05,
            'ga64__ge64': 1.0811747982562144e-29,
            'sc48__ti48': 3.7929936224990936e-10,
            'ti52__v52': 1.6071233767121864e-08,
            'v52__cr52': 2.056124898394512e-07,
            'zn63__ga63': 1.3112323974839515e-32,
            'cu63__ni63': 4.4889388627755914e-08,
            'v57__cr57': 0.0002704636301270961,
            'cr59__mn59': 0.00010275108129222282,
            'cu60__zn60': 2.120862865885726e-28,
            'ni64__co64': 2.0080238344541994e-26,
            'co59__ni59': 1.2622970145148682e-18,
            'sc51__ca51': 1.0649754816967587e-27,
            'cr45__v45': 0.0046698196947193025,
            'cu62__ni62': 2.295908681423182e-06,
            'fe61__co61': 2.0156123610846696e-07,
            'ti45__v45': 5.872939309482288e-37,
            'ti45__sc45': 4.616855683611821e-06,
            'mn59__cr59': 1.055975482576685e-28,
            'v46__cr46': 3.9647014283670007e-38,
            'cr56__mn56': 9.794964605213119e-10,
            'cr49__v49': 7.386078531165092e-06,
            'ni64__cu64': 3.4861182695749173e-20,
            'sc47__ti47': 7.88273474642574e-14,
            'fe55__co55': 4.566820525297116e-25,
            'cu64__ni64': 8.248814184399841e-07,
            'ti49__v49': 5.810177720745907e-17,
            'fe54__mn54': 1.8410238166940182e-10,
            'ti52__sc52': 4.073435696668371e-32,
            'ti48__sc48': 5.830569043231174e-18,
            'cr53__mn53': 3.8263316970390884e-17,
            'ni56__co56': 2.7460336176477442e-06,
            'cu62__zn62': 6.878369678534576e-21,
            'ni59__cu59': 6.0375091231382575e-30,
            'ca49__sc49': 1.1521390705403127e-08,
            'v55__ti55': 7.643454394259597e-28,
            'mn52__cr52': 6.294704049658e-07,
            'v58__cr58': 0.0005832894503875095,
            'v56__cr56': 0.0002038854997373826,
            'co56__fe56': 2.6071179447027625e-07,
            'v54__cr54': 3.457264637295427e-06,
            'mn51__cr51': 2.990364258374366e-06,
            'cu65__ni65': 2.4753401580387368e-11,
            'cr57__v57': 3.959576224384351e-29,
            'fe62__co62': 4.5286789636822494e-08,
            'ni58__co58': 1.5073472828636503e-09,
            'cr50__v50': 5.067980095340174e-09,
            'cu60__ni60': 6.785687080176845e-06,
            'ni63__co63': 1.0423029600868452e-15,
            'sc46__ca46': 2.0409046852200486e-09,
            'v48__cr48': 8.677545859282911e-21,
            'ga65__zn65': 6.37651584721512e-06
        }

        ye_la = comp_la.eval_ye()
        ys_la = comp_la.get_molar()

        # the individual rate is
        # r = Y(reactant) * table_value

        for r in self.rc_la.get_rates():
            rr = ys_la[r.reactants[0]] * r.eval(T, rhoY=rho*ye_la)
            if r.fname in stored_rates_la:
                assert rr == approx(stored_rates_la[r.fname], rel=1.e-6, abs=1.e-100), f"rate: {r} does not agree"
            else:
                print(f"WARNING: missing Langanke tests for tabular rate {r}")

    def test_nu_loss_values_suzuki(self):

        rho = 1.2e9
        T = 1.5e9

        comp_su = pyna.Composition(self.rc_su.get_nuclei())
        comp_su.set_all(1)
        comp_su.normalize()

        # this is generated by doing
        #
        # for r in rc_su.rates:
        #     nu_loss_rate = r.get_nu_loss(T,
        #                         rho*comp_su.eval_ye())
        #     print(f"'{r.fname}': {rc_su},")

        stored_nu_loss_su = {
            'na23__ne23': 1.2578502390300712e-13,
            'si25__al25': 0.0005089386787967424,
            'f21__ne21': 4.983256254206788e-08,
            'na19__ne19': 0.000493293000357844,
            'o20__f20': 1.8668550656057127e-13,
            'o21__f21': 1.0304477129326074e-07,
            'si26__al26': 0.00031462787988451046,
            'na25__mg25': 2.6657308423828652e-11,
            'al25__mg25': 0.00011500170073365321,
            'mg22__na22': 0.0002767982218577626,
            'si27__al27': 0.00013141083163038222,
            'f22__ne22': 1.0792505314678724e-07,
            'na24__mg24': 3.93370337581875e-10,
            'ne19__f19': 0.0001252832096143487,
            'si24__al24': 0.0007522480887757669,
            'mg28__al28': 5.426292791567733e-18,
            'f23__ne23': 3.5106676050488424e-07,
            'o19__f19': 1.3591873287418124e-09,
            'mg20__na20': 0.0011319135934955277,
            'p28__si28': 0.0003484280237167292,
            'mg27__al27': 2.6083434105025398e-15,
            'al28__si28': 3.831060797866789e-14,
            'na27__mg27': 7.802299251728987e-06,
            'mg21__na21': 0.0006340336907068992,
            'ne18__f18': 0.0003974021604949035,
            'f21__o21': 3.478821084686598e-26,
            'na24__ne24': 1.9814147087010928e-10,
            'al24__mg24': 0.0002444261479368015,
            'al23__mg23': 0.0004372874399337381,
            'al27__mg27': 3.255106279693442e-11,
            'na22__ne22': 2.2006497168948355e-07,
            'mg27__na27': 1.0899697988607703e-27,
            'o17__f17': 1.5965647193812905e-32,
            'f17__o17': 7.899054617378834e-05,
            'mg24__na24': 1.8757107528850667e-18,
            'f20__ne20': 2.1240115337229592e-08,
            'si28__al28': 9.226341626912568e-15,
            'na25__ne25': 4.5166273695294323e-23,
            'ne24__na24': 4.472165318443309e-17,
            'o18__f18': 1.6695331795511284e-33,
            'ne23__f23': 1.9118167540106322e-27,
            'p27__si27': 0.0004940585002600768,
            'al28__mg28': 1.49477663243628e-11,
            'ne25__na25': 1.7531245231618863e-06,
            'ne22__f22': 1.0542944818300268e-35,
            's28__p28': 0.0007818005881530282,
            'ne21__f21': 2.923719748936441e-17,
            'f19__o19': 1.093403227437941e-14,
            'ne23__na23': 4.3009430056097873e-10,
            'ne20__f20': 9.695265306659568e-22,
            'mg26__na26': 1.042881660253991e-28,
            'na26__mg26': 5.681065910388462e-06,
            'na21__ne21': 7.599282323751405e-05,
            'al26__mg26': 2.0956240501428204e-06,
            'mg25__na25': 5.385813495789488e-12,
            'mg23__na23': 9.610438271090285e-05,
            'na28__mg28': 9.465293245065728e-05,
            'f20__o20': 2.057038605088727e-12,
            'na20__ne20': 0.0005899195182275463,
            'f18__o18': 2.5282475946235158e-05,
            'mg28__na28': 6.450491997157852e-44
        }

        ye_su = comp_su.eval_ye()

        for r in self.rc_su.get_rates():
            nu_loss = r.get_nu_loss(T, rhoY=rho*ye_su)
            if r.fname in stored_nu_loss_su:
                assert nu_loss == approx(stored_nu_loss_su[r.fname], rel=1.e-6, abs=1.e-100), f"rate: {r} does not agree"
            else:
                print(f"WARNING: missing Suzuki tests for tabular nu loss rate {r}")

    def test_bounds(self):

        r = self.rc_su.get_rates()[0]

        T = 1.e11
        rhoy = 1.e7

        with raises(ValueError):
            r.eval(T, rhoy)

        rhoy = 1.e2

        with raises(ValueError):
            r.eval(T, rhoy)
