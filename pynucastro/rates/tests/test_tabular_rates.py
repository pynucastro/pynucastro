# unit tests for rates

from pytest import approx, raises

import pynucastro as pyna


class TestTabularRates:
    @classmethod
    def setup_class(cls):
        """ this is run once for each class before any tests """

    @classmethod
    def teardown_class(cls):
        """ this is run once for each class after all tests """

    def setup_method(self):
        """ this is run before each test """

        lib_su = pyna.SuzukiLibrary()
        lib_la = pyna.LangankeLibrary()
        self.rc_su = pyna.RateCollection(libraries=[lib_su])
        self.rc_la = pyna.RateCollection(libraries=[lib_la])

    def teardown_method(self):
        """ this is run after each test """

    def test_rate_values_suzuki(self):

        rho = 1.2e8
        T = 1.5e9

        comp_su = pyna.Composition(self.rc_su.get_nuclei())
        comp_su.set_all(1)
        comp_su.normalize()

        # this is generated by doing
        # rvals = ec.evalue_rates(rho, T, comp)
        # for r in rvals:
        #     print(f"'{r.fname}': {rvals[r]},")

        stored_rates_su = {
            'al23__mg23': 0.0018356969491904495,
            'al24__mg24': 0.0010224143375329186,
            'al25__mg25': 0.0004742839102314945,
            'al26__mg26': 8.208195176601902e-06,
            'al27__mg27': 1.3548922253387587e-12,
            'al28__mg28': 2.82771853373719e-14,
            'al28__si28': 6.552181957939603e-07,
            'f17__o17': 0.0004964162849900655,
            'f18__o18': 0.00014752795061742893,
            'f19__o19': 1.4589243454067581e-18,
            'f20__ne20': 4.575609904051387e-05,
            'f20__o20': 1.413854271576516e-15,
            'f21__ne21': 0.0001131073690508162,
            'f21__o21': 3.123684503103512e-30,
            'f22__ne22': 0.0001215897114169894,
            'f23__ne23': 0.00023974141956359604,
            'mg20__na20': 0.005114821722250049,
            'mg21__na21': 0.0027551736679093503,
            'mg22__na22': 0.0013109707173084527,
            'mg23__na23': 0.0004219912985023772,
            'mg24__na24': 1.6598635700843666e-22,
            'mg25__na25': 8.591632561336034e-16,
            'mg26__na26': 8.68429638614793e-33,
            'mg27__al27': 1.361348911272524e-08,
            'mg27__na27': 8.723314871252093e-32,
            'mg28__al28': 3.336720258691769e-11,
            'mg28__na28': 2.8134798652347447e-48,
            'na19__ne19': 0.002449472490421163,
            'na20__ne20': 0.002428040325297442,
            'na21__ne21': 0.00037796168976840364,
            'na22__ne22': 8.135557391945126e-07,
            'na23__ne23': 1.1720011968249513e-17,
            'na24__mg24': 4.406876111298294e-07,
            'na24__ne24': 3.756853129605931e-12,
            'na25__mg25': 4.479044974800567e-06,
            'na25__ne25': 3.72540094885677e-27,
            'na26__mg26': 0.001022078977999804,
            'na27__mg27': 0.0017911484289089184,
            'na28__mg28': 0.009005626791070679,
            'ne18__f18': 0.0022422277113142404,
            'ne19__f19': 0.0006992986372563014,
            'ne20__f20': 9.47646722208835e-26,
            'ne21__f21': 2.715931312189591e-21,
            'ne22__f22': 9.580760966938022e-40,
            'ne23__f23': 1.6479178669188904e-31,
            'ne23__na23': 9.3540132273414e-06,
            'ne24__na24': 1.0429568596930843e-07,
            'ne25__na25': 0.0007774750136737904,
            'o17__f17': 2.992303848236561e-23,
            'o18__f18': 6.178789007042831e-23,
            'o19__f19': 1.4762829483676722e-05,
            'o20__f20': 1.1564141869489023e-05,
            'o21__f21': 0.0001140275780950444,
            'p27__si27': 0.0017552224872207786,
            'p28__si28': 0.0011558955780814398,
            's28__p28': 0.0025226735211831297,
            'si24__al24': 0.002836345548021039,
            'si25__al25': 0.0018713317001937818,
            'si26__al26': 0.0012411477482899727,
            'si27__al27': 0.0004907519533774708,
            'si28__al28': 3.1330669347239767e-18
        }

        ye_su = comp_su.eval_ye()
        ys_su = comp_su.get_molar()

        # the individual rate is
        # r = Y(reactant) * table_value

        for r in self.rc_su.get_rates():
            rr = ys_su[r.reactants[0]] * r.eval(T, rhoY=rho*ye_su)
            if r.fname in stored_rates_su:
                assert rr == approx(stored_rates_su[r.fname], rel=1.e-6, abs=1.e-100), f"rate: {r} does not agree"
            else:
                print(f"WARNING: missing Suzuki tests for tabular rate {r}")

    def test_rate_values_langanke(self):

        rho = 1.2e8
        T = 1.5e9

        comp_la = pyna.Composition(self.rc_la.get_nuclei())
        comp_la.set_all(1)
        comp_la.normalize()

        # this is generated by doing
        # rvals = ec.evalue_rates(rho, T, comp)
        # for r in rvals:
        #     print(f"'{r.fname}': {rvals[r]},")

        stored_rates_la = {
            'ca45__sc45': 4.945106634854298e-16,
            'ca46__sc46': 1.362123792113593e-20,
            'ca47__sc47': 1.6046995214743011e-12,
            'ca48__sc48': 3.776976242248192e-20,
            'ca49__sc49': 1.173042295242909e-08,
            'ca50__sc50': 2.491295946548648e-06,
            'ca51__sc51': 9.00360319352955e-06,
            'co54__fe54': 0.00011977653138869004,
            'co55__fe55': 9.65205676234928e-07,
            'co55__ni55': 5.164742607583979e-43,
            'co56__fe56': 2.626679443919435e-07,
            'co56__ni56': 1.0315857175044747e-21,
            'co57__fe57': 2.943107710192689e-08,
            'co57__ni57': 7.492446662251801e-25,
            'co58__fe58': 3.4012702161969275e-08,
            'co58__ni58': 5.682008135233992e-15,
            'co59__fe59': 8.430316958796801e-12,
            'co59__ni59': 1.274216088443656e-18,
            'co60__fe60': 1.542885551911428e-10,
            'co60__ni60': 1.4099599613648883e-09,
            'co61__fe61': 1.8723925210162256e-17,
            'co61__ni61': 1.8389102046266886e-11,
            'co62__fe62': 4.548576706893993e-13,
            'co62__ni62': 6.571435177301094e-07,
            'co63__fe63': 1.058713353396562e-24,
            'co63__ni63': 1.3993621716063521e-06,
            'co64__fe64': 4.082144616483086e-19,
            'co64__ni64': 0.00013845991727729731,
            'co65__ni65': 5.0368583944049524e-05,
            'cr45__v45': 0.001790931905025935,
            'cr46__v46': 0.0008163055738829279,
            'cr47__v47': 0.0003746455035892882,
            'cr48__v48': 7.674141220899464e-06,
            'cr49__mn49': 6.637276681002491e-40,
            'cr49__v49': 7.373426151649422e-06,
            'cr50__mn50': 3.483373046805358e-39,
            'cr50__v50': 5.119074341915992e-09,
            'cr51__mn51': 4.449810386729302e-25,
            'cr51__v51': 2.8501015539995293e-07,
            'cr52__mn52': 3.0032533331186786e-29,
            'cr52__v52': 3.7045949072404494e-16,
            'cr53__mn53': 3.90106684502367e-17,
            'cr53__v53': 1.351259799844692e-14,
            'cr54__mn54': 1.0314052144529181e-18,
            'cr54__v54': 6.727864439644308e-26,
            'cr55__mn55': 7.381928137264961e-08,
            'cr55__v55': 1.2951754076919057e-22,
            'cr56__mn56': 9.993162465466492e-10,
            'cr56__v56': 6.178511616271543e-32,
            'cr57__mn57': 3.0829103594665827e-06,
            'cr57__v57': 3.996442872089145e-29,
            'cr58__mn58': 5.099147075792652e-06,
            'cr58__v58': 8.75664889655434e-40,
            'cr59__mn59': 0.00010439983708855823,
            'cr60__mn60': 0.00017412860823889326,
            'cu58__ni58': 8.89796149070488e-05,
            'cu59__ni59': 1.5171711724655237e-05,
            'cu60__ni60': 6.090328488675914e-06,
            'cu60__zn60': 1.812503944152265e-28,
            'cu61__ni61': 3.856246985261842e-06,
            'cu61__zn61': 2.3434371671830486e-32,
            'cu62__ni62': 2.2071474652200644e-06,
            'cu62__zn62': 5.000109881158717e-21,
            'cu63__ni63': 4.5444817903893904e-08,
            'cu63__zn63': 1.0723672988971296e-25,
            'cu64__ni64': 8.357275391822377e-07,
            'cu64__zn64': 7.092888805154799e-14,
            'cu65__ni65': 2.4998196831970702e-11,
            'cu65__zn65': 2.055782034535793e-19,
            'fe52__mn52': 4.844806154545504e-06,
            'fe53__mn53': 8.064481689839592e-06,
            'fe54__co54': 1.0044378028616765e-40,
            'fe54__mn54': 1.8602046209485682e-10,
            'fe55__co55': 4.585814610141484e-25,
            'fe55__mn55': 3.293412585889703e-08,
            'fe56__co56': 1.2493003228324959e-28,
            'fe56__mn56': 1.4750459198052408e-15,
            'fe57__co57': 3.665935127092975e-18,
            'fe57__mn57': 1.2333139691820641e-12,
            'fe58__co58': 1.0678561485308587e-21,
            'fe58__mn58': 3.4943924338583175e-23,
            'fe59__co59': 3.182860968561487e-11,
            'fe59__mn59': 2.502763889448896e-20,
            'fe60__co60': 4.038966317153086e-15,
            'fe60__mn60': 4.993420547161528e-30,
            'fe61__co61': 2.0492751378221637e-07,
            'fe61__mn61': 2.5431771206110388e-26,
            'fe62__co62': 4.612685608152428e-08,
            'fe63__co63': 8.64066269946629e-06,
            'fe64__co64': 3.482755869414549e-05,
            'ga62__zn62': 0.00048529201122173005,
            'ga63__zn63': 3.376680319541146e-05,
            'ga64__ge64': 4.0667517171203935e-30,
            'ga64__zn64': 1.6357277526997046e-05,
            'ga65__ge65': 5.167956200529255e-35,
            'ga65__zn65': 6.338624217922534e-06,
            'ge64__ga64': 2.7136353529102933e-05,
            'ge65__ga65': 3.810877029469068e-05,
            'mn49__cr49': 0.00036550107024139675,
            'mn50__cr50': 0.0001641820681491691,
            'mn51__cr51': 2.9181088387450304e-06,
            'mn52__cr52': 6.131599535532375e-07,
            'mn52__fe52': 4.726595944471797e-23,
            'mn53__cr53': 2.626155513856506e-08,
            'mn53__fe53': 1.2489283310119074e-26,
            'mn54__cr54': 2.7155941532527843e-08,
            'mn54__fe54': 6.021868000568663e-14,
            'mn55__cr55': 4.734561435458163e-13,
            'mn55__fe55': 3.2344174172014726e-16,
            'mn56__cr56': 2.026190517278902e-10,
            'mn56__fe56': 1.6930131224736227e-07,
            'mn57__cr57': 1.504291970408127e-20,
            'mn57__fe57': 1.376288101420401e-07,
            'mn58__cr58': 1.3999106005583254e-17,
            'mn58__fe58': 7.3292374397926475e-06,
            'mn59__cr59': 1.0658387791378298e-28,
            'mn59__fe59': 9.342574795443462e-06,
            'mn60__cr60': 1.16504285960506e-23,
            'mn60__fe60': 0.00025634882151295976,
            'mn61__fe61': 0.00024444119254600445,
            'ni55__co55': 0.00046964939069943357,
            'ni56__co56': 2.78182450134522e-06,
            'ni57__co57': 1.4468607489182961e-06,
            'ni58__co58': 1.522557772610799e-09,
            'ni58__cu58': 1.0805345877222768e-41,
            'ni59__co59': 9.327482789298684e-08,
            'ni59__cu59': 3.528423576166848e-30,
            'ni60__co60': 3.07405743931506e-14,
            'ni60__cu60': 9.657429061096749e-34,
            'ni61__co61': 2.0850208565811273e-09,
            'ni61__cu61': 7.947901189323867e-23,
            'ni62__co62': 1.8328651427379655e-20,
            'ni62__cu62': 1.89414726939347e-27,
            'ni63__co63': 1.052049955776662e-15,
            'ni63__cu63': 2.207736007207652e-15,
            'ni64__co64': 2.0267012189589272e-26,
            'ni64__cu64': 2.675663270638593e-20,
            'ni65__co65': 1.0042418770082945e-22,
            'ni65__cu65': 5.244712818075508e-09,
            'sc45__ca45': 1.4432311023167486e-08,
            'sc45__ti45': 7.420740264936553e-22,
            'sc46__ca46': 2.0515144079853442e-09,
            'sc46__ti46': 1.6722599648376453e-11,
            'sc47__ca47': 2.229552169549975e-13,
            'sc47__ti47': 8.045725233411047e-14,
            'sc48__ca48': 1.1310035250960688e-13,
            'sc48__ti48': 3.857305917746232e-10,
            'sc49__ca49': 5.067319156206934e-22,
            'sc49__ti49': 1.04441564906385e-09,
            'sc50__ca50': 9.906839053005417e-21,
            'sc50__ti50': 7.775799134655027e-07,
            'sc51__ca51': 1.0751476367984683e-27,
            'sc51__ti51': 4.967036487703325e-06,
            'sc52__ti52': 8.930939941982464e-06,
            'ti45__sc45': 4.6628187728560365e-06,
            'ti45__v45': 2.5246462200271143e-38,
            'ti46__sc46': 5.926254100739562e-13,
            'ti46__v46': 3.904646105144138e-38,
            'ti47__sc47': 1.675154609368265e-08,
            'ti47__v47': 2.5623112463560653e-24,
            'ti48__sc48': 5.894297811281124e-18,
            'ti48__v48': 3.194260196383828e-27,
            'ti49__sc49': 1.539319926591397e-11,
            'ti49__v49': 5.920780647145192e-17,
            'ti50__sc50': 7.269185961740915e-26,
            'ti50__v50': 6.693794279000204e-22,
            'ti51__sc51': 1.1607723657862714e-24,
            'ti51__v51': 1.579067511027984e-08,
            'ti52__sc52': 4.111980221284714e-32,
            'ti52__v52': 1.6379575086288238e-08,
            'ti53__v53': 8.391996373768071e-07,
            'ti54__v54': 1.6094849723778691e-06,
            'ti55__v55': 4.989730278754445e-05,
            'ti56__v56': 0.00036973774260910195,
            'v45__cr45': 1.8238895104251636e-56,
            'v45__ti45': 0.00031732615341254503,
            'v46__cr46': 8.13267705585871e-40,
            'v46__ti46': 0.000370823588824448,
            'v47__cr47': 2.0460652034547944e-39,
            'v47__ti47': 5.812953452536022e-06,
            'v48__cr48': 6.854137909704057e-21,
            'v48__ti48': 1.6166023722575364e-06,
            'v49__cr49': 1.9900783125185736e-23,
            'v49__ti49': 5.169940644079457e-08,
            'v50__cr50': 1.9894891171830606e-12,
            'v50__ti50': 1.235472135231108e-08,
            'v51__cr51': 1.2234854709762154e-17,
            'v51__ti51': 1.6720971259223008e-12,
            'v52__cr52': 2.090085468651e-07,
            'v52__ti52': 2.929787716317489e-11,
            'v53__cr53': 3.9416256371141197e-07,
            'v53__ti53': 1.4483544643677948e-20,
            'v54__cr54': 3.5132898866144723e-06,
            'v54__ti54': 4.90762954801331e-18,
            'v55__cr55': 1.0345338246569832e-05,
            'v55__ti55': 7.714991170466841e-28,
            'v56__cr56': 0.00020714231069694173,
            'v56__ti56': 7.092201888952247e-27,
            'v57__cr57': 0.0002747894749428449,
            'v58__cr58': 0.0005926058379140264,
            'zn60__cu60': 1.5367149058668075e-05,
            'zn61__cu61': 1.4550866789178464e-05,
            'zn62__cu62': 4.976973158424743e-06,
            'zn62__ga62': 2.1336120964107672e-44,
            'zn63__cu63': 2.7131185051951433e-06,
            'zn63__ga63': 3.171005329022729e-33,
            'zn64__cu64': 8.403832051055559e-08,
            'zn64__ga64': 1.958425391512559e-37,
            'zn65__cu65': 1.9003450457714763e-07,
            'zn65__ga65': 6.232923518561239e-26,
        }

        ye_la = comp_la.eval_ye()
        ys_la = comp_la.get_molar()

        # the individual rate is
        # r = Y(reactant) * table_value

        for r in self.rc_la.get_rates():
            rr = ys_la[r.reactants[0]] * r.eval(T, rhoY=rho*ye_la)
            if r.fname in stored_rates_la:
                assert rr == approx(stored_rates_la[r.fname], rel=1.e-6, abs=1.e-100), f"rate: {r} does not agree"
            else:
                print(f"WARNING: missing Langanke tests for tabular rate {r}")

    def test_nu_loss_values_suzuki(self):

        rho = 1.2e9
        T = 1.5e9

        comp_su = pyna.Composition(self.rc_su.get_nuclei())
        comp_su.set_all(1)
        comp_su.normalize()

        # this is generated by doing
        #
        # for r in rc_su.rates:
        #     nu_loss_rate = r.get_nu_loss(T,
        #                         rho*comp_su.eval_ye())
        #     print(f"'{r.fname}': {rc_su},")

        stored_nu_loss_su = {
            'na23__ne23': 1.2578502390300712e-13,
            'si25__al25': 0.0005089386787967424,
            'f21__ne21': 4.983256254206788e-08,
            'na19__ne19': 0.000493293000357844,
            'o20__f20': 1.8668550656057127e-13,
            'o21__f21': 1.0304477129326074e-07,
            'si26__al26': 0.00031462787988451046,
            'na25__mg25': 2.6657308423828652e-11,
            'al25__mg25': 0.00011500170073365321,
            'mg22__na22': 0.0002767982218577626,
            'si27__al27': 0.00013141083163038222,
            'f22__ne22': 1.0792505314678724e-07,
            'na24__mg24': 3.93370337581875e-10,
            'ne19__f19': 0.0001252832096143487,
            'si24__al24': 0.0007522480887757669,
            'mg28__al28': 5.426292791567733e-18,
            'f23__ne23': 3.5106676050488424e-07,
            'o19__f19': 1.3591873287418124e-09,
            'mg20__na20': 0.0011319135934955277,
            'p28__si28': 0.0003484280237167292,
            'mg27__al27': 2.6083434105025398e-15,
            'al28__si28': 3.831060797866789e-14,
            'na27__mg27': 7.802299251728987e-06,
            'mg21__na21': 0.0006340336907068992,
            'ne18__f18': 0.0003974021604949035,
            'f21__o21': 3.478821084686598e-26,
            'na24__ne24': 1.9814147087010928e-10,
            'al24__mg24': 0.0002444261479368015,
            'al23__mg23': 0.0004372874399337381,
            'al27__mg27': 3.255106279693442e-11,
            'na22__ne22': 2.2006497168948355e-07,
            'mg27__na27': 1.0899697988607703e-27,
            'o17__f17': 1.5965647193812905e-32,
            'f17__o17': 7.899054617378834e-05,
            'mg24__na24': 1.8757107528850667e-18,
            'f20__ne20': 2.1240115337229592e-08,
            'si28__al28': 9.226341626912568e-15,
            'na25__ne25': 4.5166273695294323e-23,
            'ne24__na24': 4.472165318443309e-17,
            'o18__f18': 1.6695331795511284e-33,
            'ne23__f23': 1.9118167540106322e-27,
            'p27__si27': 0.0004940585002600768,
            'al28__mg28': 1.49477663243628e-11,
            'ne25__na25': 1.7531245231618863e-06,
            'ne22__f22': 1.0542944818300268e-35,
            's28__p28': 0.0007818005881530282,
            'ne21__f21': 2.923719748936441e-17,
            'f19__o19': 1.093403227437941e-14,
            'ne23__na23': 4.3009430056097873e-10,
            'ne20__f20': 9.695265306659568e-22,
            'mg26__na26': 1.042881660253991e-28,
            'na26__mg26': 5.681065910388462e-06,
            'na21__ne21': 7.599282323751405e-05,
            'al26__mg26': 2.0956240501428204e-06,
            'mg25__na25': 5.385813495789488e-12,
            'mg23__na23': 9.610438271090285e-05,
            'na28__mg28': 9.465293245065728e-05,
            'f20__o20': 2.057038605088727e-12,
            'na20__ne20': 0.0005899195182275463,
            'f18__o18': 2.5282475946235158e-05,
            'mg28__na28': 6.450491997157852e-44
        }

        ye_su = comp_su.eval_ye()

        for r in self.rc_su.get_rates():
            nu_loss = r.get_nu_loss(T, rhoY=rho*ye_su)
            if r.fname in stored_nu_loss_su:
                assert nu_loss == approx(stored_nu_loss_su[r.fname], rel=1.e-6, abs=1.e-100), f"rate: {r} does not agree"
            else:
                print(f"WARNING: missing Suzuki tests for tabular nu loss rate {r}")

    def test_bounds(self):

        r = self.rc_su.get_rates()[0]

        T = 1.e11
        rhoy = 1.e7

        with raises(ValueError):
            r.eval(T, rhoy)

        rhoy = 1.e2

        with raises(ValueError):
            r.eval(T, rhoy)
