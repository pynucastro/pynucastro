#ifndef PARTITION_FUNCTIONS_H
#define PARTITION_FUNCTIONS_H

#include <AMReX_REAL.H>
#include <AMReX_Array.H>

#include <tfactors.H>
#include <fundamental_constants.H>
#include <network_properties.H>

using namespace amrex;
using namespace Species;

namespace part_fun {



    // interpolation routine

    template <int npts>
    AMREX_GPU_HOST_DEVICE AMREX_INLINE
    void interpolate_pf(const Real t9, const Real (&temp_array)[npts], const Real (&pf_array)[npts],
                        Real& pf, Real& dpf_dT) {

        if (t9 >= temp_array[0] && t9 < temp_array[npts-1]) {

            // find the largest temperature element <= t9 using a binary search

            int left = 0;
            int right = npts;

            while (left < right) {
                int mid = (left + right) / 2;
                if (temp_array[mid] > t9) {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }

            const int idx = right - 1;

            // now we have temp_array[idx] <= t9 < temp_array[idx+1]

            // construct the slope -- this is (log10(pf_{i+1}) - log10(pf_i)) / (T_{i+1} - T_i)

            Real slope = (pf_array[idx+1] - pf_array[idx]) / (temp_array[idx+1] - temp_array[idx]);

            // find the PF

            Real log10_pf = pf_array[idx] + slope * (t9 - temp_array[idx]);
            pf = std::pow(10.0_rt, log10_pf);

            // find the derivative (with respect to T, not T9)

            Real dpf_dT9 = pf * M_LN10 * slope;
            dpf_dT = dpf_dT9 / 1.e9_rt;

        } else {

            // T < the smallest T or >= the largest T in the partition function table
            pf = 1.0;
            dpf_dT = 0.0;

        }

    }

}

// main interface

AMREX_GPU_HOST_DEVICE AMREX_INLINE
void get_partition_function(const int inuc, [[maybe_unused]] const tf_t& tfactors,
                            Real& pf, Real& dpf_dT) {

    // inuc is the 1-based index for the species

    switch (inuc) {


    default:

        pf = 1.0_rt;
        dpf_dT = 0.0_rt;

    }

}

// spins

AMREX_GPU_HOST_DEVICE AMREX_INLINE
constexpr Real get_spin_state(const int inuc) {

    Real spin = -1.0;

    switch (inuc) {

    case He4:
    case Mg24:
    case Si28:
    case S32:
        spin = 1;
        break;

    case P31:
        spin = 2;
        break;

    case Al27:
        spin = 6;
        break;


    }

    return spin;

}


#endif
