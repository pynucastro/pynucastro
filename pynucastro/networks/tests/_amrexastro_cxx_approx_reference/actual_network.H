#ifndef actual_network_H
#define actual_network_H

#include <AMReX_REAL.H>
#include <AMReX_Array.H>
#include <AMReX_Loop.H>

#include <fundamental_constants.H>
#include <network_properties.H>

using namespace amrex;

void actual_network_init();

const std::string network_name = "pynucastro-cxx";

namespace network
{

    template<int spec>
    AMREX_GPU_HOST_DEVICE AMREX_INLINE
    constexpr amrex::Real bion () {
        using namespace Species;

        static_assert(spec >= 1 && spec <= NumSpec);

        // Set the binding energy of the element

        if constexpr (spec == He4) {
            return 28.29566_rt;
        }
        else if constexpr (spec == Mg24) {
            return 198.25701600000002_rt;
        }
        else if constexpr (spec == Si28) {
            return 236.536832_rt;
        }
        else if constexpr (spec == S32) {
            return 271.78012800000005_rt;
        }


        // Return zero if we don't recognize the species.
        return 0.0_rt;
    }

    template<int spec>
    AMREX_GPU_HOST_DEVICE AMREX_INLINE
    constexpr amrex::Real mion () {
        static_assert(spec >= 1 && spec <= NumSpec);

        constexpr amrex::Real A = NetworkProperties::aion(spec);
        constexpr amrex::Real Z = NetworkProperties::zion(spec);

        return (A - Z) * C::Legacy::m_n + Z * (C::Legacy::m_p + C::Legacy::m_e) - bion<spec>() * C::Legacy::MeV2gr;
    }

    // Legacy (non-templated) interfaces

    AMREX_GPU_HOST_DEVICE AMREX_INLINE
    amrex::Real bion (int spec) {
        using namespace Species;

        amrex::Real b = 0.0_rt;

        // Set the binding energy of the element
        constexpr_for<1, NumSpec+1>([&] (auto n) {
            if (n == spec) {
                b = bion<n>();
            }
        });

        return b;
    }

    AMREX_GPU_HOST_DEVICE AMREX_INLINE
    amrex::Real mion (int spec) {
        using namespace Species;

        amrex::Real m = 0.0_rt;

        constexpr_for<1, NumSpec+1>([&] (auto n) {
            if (n == spec) {
                m = mion<n>();
            }
        });

        return m;
    }
}

namespace Rates
{

    enum NetworkRates
    {
        k_He4_Mg24_to_Si28_removed = 1,
        k_He4_Mg24_to_p_Al27_removed = 2,
        k_p_Al27_to_Si28_removed = 3,
        k_Si28_to_He4_Mg24_removed = 4,
        k_Si28_to_p_Al27_removed = 5,
        k_p_Al27_to_He4_Mg24_removed = 6,
        k_He4_Si28_to_S32_removed = 7,
        k_He4_Si28_to_p_P31_removed = 8,
        k_p_P31_to_S32_removed = 9,
        k_S32_to_He4_Si28_removed = 10,
        k_S32_to_p_P31_removed = 11,
        k_p_P31_to_He4_Si28_removed = 12,
        k_Mg24_He4_to_Si28_approx = 13,
        k_Si28_to_Mg24_He4_approx = 14,
        k_Si28_He4_to_S32_approx = 15,
        k_S32_to_Si28_He4_approx = 16,
        NumRates = k_S32_to_Si28_He4_approx
    };

    // number of reaclib rates

    const int NrateReaclib = 12;

    // number of tabular rates

    const int NrateTabular = 0;

    // rate names -- note: the rates are 1-based, not zero-based, so we pad
    // this vector with rate_names[0] = "" so the indices line up with the
    // NetworkRates enum

    static const std::vector<std::string> rate_names = {
        "",   // 0
        "He4_Mg24_to_Si28_removed",  // 1,
        "He4_Mg24_to_p_Al27_removed",  // 2,
        "p_Al27_to_Si28_removed",  // 3,
        "Si28_to_He4_Mg24_removed",  // 4,
        "Si28_to_p_Al27_removed",  // 5,
        "p_Al27_to_He4_Mg24_removed",  // 6,
        "He4_Si28_to_S32_removed",  // 7,
        "He4_Si28_to_p_P31_removed",  // 8,
        "p_P31_to_S32_removed",  // 9,
        "S32_to_He4_Si28_removed",  // 10,
        "S32_to_p_P31_removed",  // 11,
        "p_P31_to_He4_Si28_removed",  // 12,
        "Mg24_He4_to_Si28_approx",  // 13,
        "Si28_to_Mg24_He4_approx",  // 14,
        "Si28_He4_to_S32_approx",  // 15,
        "S32_to_Si28_He4_approx"  // 16,
    };

}

#ifdef NSE_NET
namespace NSE_INDEX
{
    constexpr int H1_index = -1;
    constexpr int N_index = -1;
    constexpr int He4_index = 0;

    // Each row corresponds to the rate in NetworkRates enum
    // First 3 row indices for reactants, followed by 3 product indices
    // last index is the corresponding reverse rate index.

    extern AMREX_GPU_MANAGED amrex::Array2D<int, 1, Rates::NumRates, 1, 7, Order::C> rate_indices;
}
#endif

#endif
