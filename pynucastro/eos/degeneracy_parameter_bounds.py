"""A coarse table of degeneracy parameter (eta) for use in bracketing
the root finding algorithm.
"""

# flake8: noqa

import numpy as np

Ts = np.logspace(3, 12, 10)
rhoYes = np.logspace(-12, 11, 24)


# eta including the effects of positrons
# this is eta_pos(rhoYe, T)

eta_pos = np.array([
    [   -19.35,    -22.81,    -26.26,    -29.71,    -33.17,    -36.65,    -40.37,    -45.29,    -51.75,     -58.6],
    [   -17.05,     -20.5,    -23.96,    -27.41,    -30.87,    -34.35,    -38.06,    -42.99,    -49.44,     -56.3],
    [   -14.75,     -18.2,    -21.65,    -25.11,    -28.56,    -32.05,    -35.76,    -40.69,    -47.14,       -54],
    [   -12.44,     -15.9,    -19.35,    -22.81,    -26.26,    -29.74,    -33.46,    -38.39,    -44.84,    -51.69],
    [   -10.14,    -13.59,    -17.05,     -20.5,    -23.96,    -27.44,    -31.16,    -36.08,    -42.54,    -49.39],
    [   -7.838,    -11.29,    -14.75,     -18.2,    -21.66,    -25.14,    -28.85,    -33.78,    -40.23,    -47.09],
    [   -5.534,     -8.99,    -12.44,     -15.9,    -19.35,    -22.84,    -26.55,    -31.48,    -37.93,    -44.79],
    [   -3.219,    -6.687,    -10.14,     -13.6,    -17.05,    -20.53,    -24.25,    -29.17,    -35.63,    -42.48],
    [  -0.7919,     -4.38,    -7.838,    -11.29,    -14.75,    -18.23,    -21.95,    -26.87,    -33.33,    -40.18],
    [    2.697,    -2.038,    -5.534,     -8.99,    -12.45,    -15.93,    -19.64,    -24.57,    -31.02,    -37.88],
    [    13.95,    0.6542,    -3.219,    -6.687,    -10.14,    -13.63,    -17.34,    -22.27,    -28.72,    -35.58],
    [       65,     6.369,   -0.7919,     -4.38,    -7.841,    -11.32,    -15.04,    -19.96,    -26.42,    -33.27],
    [    301.8,     30.15,     2.697,    -2.038,    -5.538,    -9.021,    -12.73,    -17.66,    -24.11,    -30.97],
    [     1400,       140,     13.95,    0.6536,    -3.222,    -6.718,    -10.43,    -15.36,    -21.81,    -28.67],
    [     6498,     649.8,     64.96,     6.365,   -0.7958,    -4.412,     -8.13,    -13.06,    -19.51,    -26.36],
    [ 3.01e+04,      3010,       301,     30.07,     2.686,    -2.071,    -5.826,    -10.75,    -17.21,    -24.06],
    [1.384e+05, 1.384e+04,      1384,     138.4,     13.78,    0.6006,    -3.515,    -8.451,     -14.9,    -21.76],
    [6.179e+05, 6.179e+04,      6179,     617.9,     61.78,     6.009,    -1.133,    -6.148,     -12.6,    -19.46],
    [2.493e+06, 2.493e+05, 2.493e+04,      2493,     249.3,     24.88,     1.869,    -3.842,     -10.3,    -17.15],
    [8.257e+06, 8.257e+05, 8.257e+04,      8257,     825.7,     82.55,         8,    -1.505,    -7.997,    -14.85],
    [2.246e+07, 2.246e+06, 2.246e+05, 2.246e+04,      2246,     224.6,     22.35,     1.083,    -5.694,    -12.55],
    [5.419e+07, 5.419e+06, 5.419e+05, 5.419e+04,      5419,     541.9,     54.13,      4.87,    -3.387,    -10.25],
    [1.231e+08, 1.231e+07, 1.231e+06, 1.231e+05, 1.231e+04,      1231,     123.1,     12.05,    -1.046,    -7.944],
    [2.718e+08, 2.718e+07, 2.718e+06, 2.718e+05, 2.718e+04,      2718,     271.8,     27.06,     1.562,    -5.641]
])


# eta with just electrons
# this is eta_ele(rhoYe, T)

eta_ele = np.array([
    [   -19.35,    -22.81,    -26.26,    -29.71,    -33.17,    -36.65,    -40.37,    -45.29,    -51.75,     -58.6],
    [   -17.05,     -20.5,    -23.96,    -27.41,    -30.87,    -34.35,    -38.06,    -42.99,    -49.44,     -56.3],
    [   -14.75,     -18.2,    -21.65,    -25.11,    -28.56,    -32.05,    -35.76,    -40.69,    -47.14,       -54],
    [   -12.44,     -15.9,    -19.35,    -22.81,    -26.26,    -29.74,    -33.46,    -38.39,    -44.84,    -51.69],
    [   -10.14,    -13.59,    -17.05,     -20.5,    -23.96,    -27.44,    -31.16,    -36.08,    -42.54,    -49.39],
    [   -7.838,    -11.29,    -14.75,     -18.2,    -21.66,    -25.14,    -28.85,    -33.78,    -40.23,    -47.09],
    [   -5.534,     -8.99,    -12.44,     -15.9,    -19.35,    -22.84,    -26.55,    -31.48,    -37.93,    -44.79],
    [   -3.219,    -6.687,    -10.14,     -13.6,    -17.05,    -20.53,    -24.25,    -29.17,    -35.63,    -42.48],
    [  -0.7919,     -4.38,    -7.838,    -11.29,    -14.75,    -18.23,    -21.95,    -26.87,    -33.33,    -40.18],
    [    2.697,    -2.038,    -5.534,     -8.99,    -12.45,    -15.93,    -19.64,    -24.57,    -31.02,    -37.88],
    [    13.95,    0.6542,    -3.219,    -6.687,    -10.14,    -13.63,    -17.34,    -22.27,    -28.72,    -35.58],
    [       65,     6.369,   -0.7919,     -4.38,    -7.841,    -11.32,    -15.04,    -19.96,    -26.42,    -33.27],
    [    301.8,     30.15,     2.697,    -2.038,    -5.538,    -9.021,    -12.73,    -17.66,    -24.11,    -30.97],
    [     1400,       140,     13.95,    0.6536,    -3.222,    -6.718,    -10.43,    -15.36,    -21.81,    -28.67],
    [     6498,     649.8,     64.96,     6.365,   -0.7958,    -4.412,     -8.13,    -13.06,    -19.51,    -26.36],
    [ 3.01e+04,      3010,       301,     30.07,     2.686,    -2.071,    -5.826,    -10.75,    -17.21,    -24.06],
    [1.384e+05, 1.384e+04,      1384,     138.4,     13.78,    0.6006,    -3.515,    -8.451,     -14.9,    -21.76],
    [6.179e+05, 6.179e+04,      6179,     617.9,     61.78,     6.009,    -1.133,    -6.148,     -12.6,    -19.46],
    [2.493e+06, 2.493e+05, 2.493e+04,      2493,     249.3,     24.88,     1.869,    -3.842,     -10.3,    -17.15],
    [8.257e+06, 8.257e+05, 8.257e+04,      8257,     825.7,     82.55,         8,    -1.505,    -7.997,    -14.85],
    [2.246e+07, 2.246e+06, 2.246e+05, 2.246e+04,      2246,     224.6,     22.35,     1.083,    -5.694,    -12.55],
    [5.419e+07, 5.419e+06, 5.419e+05, 5.419e+04,      5419,     541.9,     54.13,      4.87,    -3.387,    -10.25],
    [1.231e+08, 1.231e+07, 1.231e+06, 1.231e+05, 1.231e+04,      1231,     123.1,     12.05,    -1.046,    -7.944],
    [2.718e+08, 2.718e+07, 2.718e+06, 2.718e+05, 2.718e+04,      2718,     271.8,     27.06,     1.562,    -5.641]
])


def get_eta_bounds(rhoYe0, T0, include_positrons=True):
    """Return an interval that we expect to contain the degeneracy
    parameter, eta, given a rho * Ye and T

    Parameters
    ----------
    rhoYe0 : float
        the electron mass fraction (rho * Ye)
    T : float
        the temperature (K)

    Returns
    -------
    tuple(float, float)

    """

    # we will find the index into the table such that
    #   rhoYes[ir] <= rhoYe0 < rhoYe[ir+1]
    # and likewise for T

    # then we will take a 4x4 box of etas from our
    # precomputed table and use those as the bounds

    ir = np.clip(np.searchsorted(rhoYes, rhoYe0) - 1, 1, len(rhoYes)-3)
    it = np.clip(np.searchsorted(Ts, T0) - 1, 1, len(Ts)-3)

    if include_positrons:
        eta_min = eta_pos[ir-1:ir+3, it-1:it+3].min()
        eta_max = eta_pos[ir-1:ir+3, it-1:it+3].max()
    else:
        eta_min = eta_ele[ir-1:ir+3, it-1:it+3].min()
        eta_max = eta_ele[ir-1:ir+3, it-1:it+3].max()


    return eta_min, eta_max
